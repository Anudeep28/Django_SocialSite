from django.db import models
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    # Create your models here.
    name = models.CharField(max_length=200, null=True)
    email = models.EmailField(unique=True, null=True)
    bio = models.TextField(null=True)

    # Requires pillow library to work
    avatar = models.ImageField(null=True, default="eneru_logo.jpg")

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []


# Create your models here.
# class is table in the database
# every row is an instance int he table inside the class

class Topic(models.Model):
    name = models.CharField(max_length=200)

    def __str__(self):
        return self.name

# id for the Room is automaticall generated by default
class Room(models.Model):
    host = models.ForeignKey(User,  on_delete=models.SET_NULL, null=True)
    topic = models.ForeignKey(Topic,  on_delete=models.SET_NULL, null=True)
    name = models.CharField(max_length = 200)
    # null tells the table it can be empty optional to be filled
    # blank tell when saving the form it can be empty as well
    description = models.TextField(null=True, blank=True)
    # related name is imp since we already have the User assigned
    # to the host
    participants = models.ManyToManyField(User, 
                                          related_name='participants',
                                          blank=True)

    # auto_now it will automatically store the updated value int his field
    updated = models.DateTimeField(auto_now=True)
    # auto_now_add takes a snapshot of when it was first added the instance
    created = models.DateTimeField(auto_now_add=True)

    # Meta is like manipulating the above fields as per needs
    # the hyphon besides the field names tell django to reverse the order
    # no need for migrations when you add Meta to the models
    class Meta:
        ordering = ['-updated','-created']

    def __str__(self):
        return self.name
    

class Message(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    # CASCADE option deletes the childer when the parent is deleted
    # Room is the parent 
    room = models.ForeignKey(Room,  on_delete=models.CASCADE)
    body = models.TextField()
    # auto_now it will automatically store the updated value int his field
    updated = models.DateTimeField(auto_now=True)
    # auto_now_add takes a snapshot of when it was first added the instance
    created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.body[:50]